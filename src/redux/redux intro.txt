---------------What is Redux?------------------
Redux is a library for managing and updating application state, using events called "actions".

-------------why Should I Use Redux?-----------
-manage state-
-Redux helps you manage "global" state - state that is needed across many parts of your application.

-------------When Should I Use Redux?----------
-large application-
You have large amounts of application state that are needed in many places in the app

-----------what problem does it solved---------

-performance optimizations-
-React is generally fast, but by default any updates to a component will cause React to re-render all of the components inside that part of the component tree. 
-the best way to improve performance is to skip unnecessary re-renders, so that components only re-render when their data has actually changed.
-React Redux implements performance optimizations internally, so that your own component only re-renders when it actually needs to.

------------------------------------------------

-Redux is a library for managing global application state

-----Redux uses a "one-way data flow" app structure

--When something happens in the app:
The UI dispatches an action
The store runs the reducers, and the state is updated based on what occurred
The store notifies the UI that the state has changed
-The UI re-renders based on the new state

-------Redux uses several types of code
-State describes the condition of the app at a point in time, and UI renders based on that state
-Actions are plain objects with a type field, and describe "what happened" in the app
-Reducers are functions that calculate a new state value based on previous state + an action
-A Redux store runs the root reducer whenever an action is dispatched


//////////---------git command-------------////////////
--what is github?
  GitHub is a code hosting platform for collaboration and version control.
  GitHub lets you (and others) work together on projects.

github features-
1.easy project management
2.improve code write
3.secure
4.

1.you don't have any code
    1-git clone                                //copy master file
    2-git checkout -b branch-name              //create a new branch
    3-git status                               //check which file changed 
    4-git add .                                //add file locally (here "." //means all files)
    5-git add src/pages/home.js                //add particular file
    6-git commit -m "message"                  //all changes commit
    7-git push origin branch-name              //push commit files on github

2.if you are work all ready created branch
    1-git checkout branch-name                 //move to existing branch
    2-git fetch --all                          //fetch all branch from github
    3-git pull origin branch-name              //all the changes implements in current branch
    4-git status
    5-git add .
    6-git commit -m "some-message"
    7-git push origin branch-name

git branch --all                                //list of your local branch
git init
git remote -v                                   //check which origin connect
git branch -D branch-name                       //delete local branch
git push origin --delete branch-name            //delete remote branch (github)

3.if i have push any branch so this branch push on checkout branch not a main branch 

--issues

•	if you need to save your changes temporary without affecting existing code - git stash save "message here"

•	whenever your new branch would push you can create the PR option on github (what ever source control uses).
Note - this all are totally basic thing on git and necessary for project startups.

•	pull - Equivalent to git fetch + git merge. Pull will bring the currently checked out branch up to date with the equivalent origin branch.
•	git pull --rebase - Rebase the current branch to the HEAD of the origin branch.
•	Note: many git commands work off of local files, so be sure to pull necessary remote changes if they're relevant.

•	push - Publish local commits to the origin branch.
•	git push --force-with-lease - Used after a rebase to allow changes to be published safely. This command will fail if other changes have been published to the origin branch.

•	git add -u - Stage all currently changed files that are tracked by git.
•	git add *.ts - Stage all currently changed files that end with .ts.

•	diff - Displays active changes to tracked files.
	•	By default displays differences between your active changes and previous commit. 
	•	By default uses command line to display differences, but can be configured to use your editor of choice.
	•	git diff <specific/file/name/or/directory/path> - Displays only the differences to the mentioned file or path of files
	•	git diff -b <other_branch> <optional file path> - Used to compare your total branch's changes (including uncommitted active changes) to another branch. Useful when tidying up release features to make sure only intended changes are going through.
	•	git diff <commit hash> - Compare current branch state with specific commit.
